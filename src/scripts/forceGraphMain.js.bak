import ForceGraph from 'force-graph';
import csv from 'csv-parser';
import fs from 'node:fs';

// import nodesFileData from '/data/nodes.csv?url';
// import linksFileData from '/data/links.csv?url';

import nodesFileData from '../data/nodes.JSON?url';
import linksFileData from '../data/links.JSON?url';



const Graph = new ForceGraph(document.getElementById('graph'));


//Copy pasted const function
const updateGraphData = () => {
  Graph.graphData({nodes: nodesData, links: linksData});
  console.log("graph updated");
  };

//Default node size, to be scaled with individual node multiplier
const dfNodeSize = 30;

//const nodesFileData = "../scripts/csvparser.js"; 

const nodesData = [];

//const nodesData = [{Id: "Norio Productions",
//image: "https://static.wikia.nocookie.net/virtualyoutuber/images/f/fb/NoriPro_Logo.png",
//Link: "https://www.youtube.com/channel/UC8NZiqKx6fsDT3AVcMiVFyA",
//Notes:"Agency",
//size: 0.5,
//shape: "square"
//},
//
//{Id: "Inuyama Tamaki",
//image: "https://static.wikia.nocookie.net/virtualyoutuber/images/5/50/Inuyama_Tamaki_-_Profile_Picture.jpg",
//Link: "https://www.youtube.com/channel/UC8NZiqKx6fsDT3AVcMiVFyA",
//Notes:"",
//size: 1,
//shape: ""
//}]; 


//const linksFileData = "/data/links.csv";

const linksData = []; 


// fs.createReadStream(nodesFileData)
  // .pipe(csv())
  // .on('data', (data) => {nodesData.push(data);console.log(data);})
  // .on('end', () => {console.log(nodesData)});

// fs.createReadStream(linksFileData)
  // .pipe(csv())
  // .on('data', (data) => linksData.push(data))
  // .on('end', () => {console.log(linksData)});
  
  fs.readFile(nodesFileData, function(err, data) { 

    if (err) throw err; 

    nodesData = JSON.parse(data); 
    console.log(nodesData); 
}); 

  fs.readFile(linksFileData, function(err, data) { 

    if (err) throw err; 

    linksData = JSON.parse(data); 
    console.log(linksData); 
}); 



//Populating node objects with Image object, setting source
for (let i = 0; i < nodesData.length; i++) {
  
  const img = new Image();
  img.onLoad = new function (){
    nodesData[i].nodeImage = img;

    // console.log(`${data.nodesData[i].nodeID} is loaded`);
    }
  img.src = nodesData[i].image;
  
  // img.style.borderRadius = "100%";
  
  // return;
};



//***************************************************************************************************************************************
//										Main graph settings
//***************************************************************************************************************************************


Graph
//Needs to keep redrawing for hover window hitbox?
.autoPauseRedraw(false)
// .linkDirectionalParticles(2)
.nodeId('nodeID')
.linkSource('nodeFrom')
.linkTarget('nodeTo')
//nodeCanvasObject passes node in callback, passing node object					//Arrow funciton???
.nodeCanvasObject(({ nodeImage, x, y, nodeID   ,  hwX,hwY,hwWidth,hwHeight, hovering,  size, shape}, ctx) => paintNodeCircle({ nodeImage, x, y, nodeID, hwX,hwY,hwWidth,hwHeight, hovering,  size, shape}, ctx, dfNodeSize))


.nodePointerAreaPaint((node, color, ctx) => {
  // if(node.nodeID == "Nagase Yuka"){console.log(node);}
  
  const nodeSize = node.size * dfNodeSize;

  if (!node.hovering){
    ctx.fillStyle = color;
    ctx.fillRect(node.x - nodeSize / 2, node.y - nodeSize / 2, nodeSize, nodeSize); // draw square as pointer trap
  }
  else {
    ctx.fillStyle = color;
    ctx.fillRect(node.x - nodeSize / 2, node.y - nodeSize / 2, nodeSize, nodeSize); 
    //Adding Hover Window to hitbox
    ctx.fillRect(node.hwX, node.hwY, node.hwWidth, node.hwHeight);
    //fill in gap between node and hover window
    ctx.fillRect(node.x, node.y-nodeSize/2, node.hwX - node.x, nodeSize*2);
  }
})
.onNodeHover((node, prevNode) => makeHoverWindow(node, prevNode))
.onNodeDragEnd((node) => {if(!node.pinned){node.fx = null; node.fy = null;}})

  
.linkWidth(2)
// .lineDirectionalArrowLength(link => link.relation == "Illustrator"? 6 : 0)
.linkDirectionalArrowLength((cLink) => {
  if(cLink.relation == "Illustrator"){
    return 7;
  }
  
})
.linkDirectionalArrowRelPos(0.7)
.linkAutoColorBy('relation')
.linkColor((cLink) => {
  if (cLink.relation == ""){
    return 'DarkGray';
  }
  else if (cLink.relation == "collabs"){
    return 'DarkGray';
  }
  else if (cLink.relation == "Illustrator"){
    return '#97d397';
  }
})
.onNodeRightClick((node) => pinNode(node))
;

Graph.d3Force('link').distance(link => nodeDistanceFunction(link));


updateGraphData();

console.log(Graph.graphData().nodes);
	
//***************************************************************************************************************************************
//										Main graph settings
//***************************************************************************************************************************************
	



function paintNodeCircle({ nodeImage, x, y, nodeID,  imdefined,hwX,hwY,hwWidth,hwHeight, hovering, index,  size, shape}, ctx, dfNodeSize){
	//Circle image from https://stackoverflow.com/questions/4276048/html5-canvas-fill-circle-with-image
	//Fit + preserve ascpect ratio from https://stackoverflow.com/questions/23104582/scaling-an-image-to-fit-on-canvas
	// drawImage reference https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
	//context.arc(x, y, r, sAngle, eAngle, counterclockwisebool)
	//context.drawImage(img, x, y, width, height)/context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height)
	
	
	
	const nodeSize = size * dfNodeSize;
  // console.log(`${nodeID}: ${size}`)
	
	
	//Find larger side to fit image to (Same ratio to preserve aspect ratio)
	const ratio  = Math.min ( nodeSize / nodeImage.width, 
							nodeSize / nodeImage.height);
	const widthScaled = nodeImage.width*ratio;
	const heightScaled = nodeImage.height*ratio;
	const centerShift_x = ( nodeSize - widthScaled) / 2;
	const centerShift_y = ( nodeSize - heightScaled) / 2;   
	const textTopPadding = 3;
	const textSidePadding = 8;
	const textRectPadding = 1.5;
	const textRectHeight = 8;
	const ftSize = 6;



  //console.log(Graph.graphData().links);



 
	//***Add second line with ctx.measureWidth conditional
  //Add node name text + background
	ctx.textAlign = "center";
	ctx.font = `${ftSize}px Tahoma`;
	ctx.fillStyle = "#dededeCC"
	ctx.fillRect(x - (ctx.measureText(nodeID).width / 2) - textRectPadding, 
				 y + (nodeSize / 2) + textTopPadding - 1,
				 ctx.measureText(nodeID).width + textRectPadding * 2,
				 textRectHeight);
	ctx.fillStyle = "Black";
	ctx.textBaseline = "top";
	ctx.fillText(nodeID, x, y + nodeSize / 2 + textTopPadding/*, nodeSize + textSidePadding*/);

	//check hitbox
  // if(nodeID == "Nagase Yuka"){console.log("fill hover check: " + hovering + "\n hwX: " + hwX + "\n hwY: " + hwY + "\n node x: " + x + "\n node y: " + y + "\n hwWidth: " + hwWidth + "\n hwHeight: " + hwHeight);}
	if(hovering){
		ctx.fillStyle = "Red";
		ctx.fillRect(x - nodeSize / 2, y - nodeSize / 2, nodeSize, nodeSize); 
		ctx.fillRect(hwX, hwY, hwWidth, hwHeight);
		//fill in gap between node and hover window
		ctx.fillRect(x, y-nodeSize/2,  hwX - x, nodeSize*2);
	}

  if(!shape){
  //Circle path
    ctx.save();  //*????
    ctx.beginPath();
    ctx.arc(x, y, nodeSize/2, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.clip();
    
	 //background
    ctx.fillStyle = "White";
    ctx.fill();

   
  }
  else if(shape == "square"){
    ctx.save();
    ctx.fillStyle = "White";
    ctx.fillRect(x-nodeSize/2, y-nodeSize/2, nodeSize,nodeSize);
  }
  

	//***Add custom shift in nodes data /**Add fit/fill/stretch options
	//Circle image
  //console.log("Drawing " + nodeID);
  try{
	ctx.drawImage(nodeImage, 0, 0, nodeImage.width, nodeImage.height, 
					(x - nodeSize/2) + centerShift_x, (y - nodeSize/2) + centerShift_y, widthScaled, heightScaled);
  }
  catch (err){//console.log(`For ${nodeID}:` + err);
          }

	// ctx.beginPath();
	// ctx.arc(x, y, nodeSize / 2, 0, Math.PI * 2, true);
	// ctx.clip();
	// ctx.closePath();
	// ctx.restore();
	
	// ctx.drawImage(nodeImage, x - nodeSize / 2, y - nodeSize / 2, nodeSize, nodeSize);
	

	ctx.strokeStyle = 'DarkGray';
	ctx.lineWidth = 1;
  if(!shape){
	//Circle outline
	ctx.stroke();
  }	

  else if(shape == "square"){
    
    ctx.strokeRect(x-nodeSize/2, y-nodeSize/2, nodeSize,nodeSize);

  }
	
	return;
}


function makeHoverWindow(node, prevNode){
	//https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
	
	//Checks if hovered node is null
	if (node){
			//*Change index order to paint on top on hover - Update messes with physics/graph shape
			// currentNodesData.push(currentNodesData[node.index]);
			// currentNodesData.splice(node.index, 1);  
			// updateGraphData();
			
    if(prevNode){
			if(prevNode != node){
				if(!prevNode.pinned){
					prevNode.fx = null;
					prevNode.fy = null;
				}
				prevNode.hovering = false;
				prevNode.hwWidth = null;
				prevNode.hwHeight = null;
				prevNode.hwX = null;
				prevNode.hwY = null;
			}
		}

			//Removes previous hovered node if hovered to overlapping node (didn't call with null node)
			if (document.getElementById("hoverWindow")){
			document.getElementById("hoverWindow").remove(); 
			}
			
			//***Adjust pop-up based on viewport edges
			//***Change window size based on zoom (js to css class style)
			const hoverWindow = document.createElement("span");
			const sidePadding = 20 * Graph.zoom();
			const topPadding = -15 * Graph.zoom();
			
			hoverWindow.id = "hoverWindow";
			hoverWindow.classList.add("hoverWindow");
			hoverWindow.innerHTML = createHoverWindowHTML(node);
			
			//Populate window in document so window width/height is rendered
			const docBody = document.getElementById("graph");
			docBody.insertBefore(hoverWindow, docBody.children[0]);
			
			const nodeScreenCoords = Graph.graph2ScreenCoords(node.x, node.y);
			const hwYEdgeOffset = nodeScreenCoords.y + topPadding + hoverWindow.getBoundingClientRect().height - Graph.height();
			
			if (hwYEdgeOffset > 0){node.hwYEdgeOffset = hwYEdgeOffset;}
			else {node.hwYEdgeOffset = 0;}
			
			hoverWindow.style.left = (nodeScreenCoords.x + sidePadding)+ "px";
			hoverWindow.style.top = (nodeScreenCoords.y + topPadding - node.hwYEdgeOffset) + "px";
			
			
			const hwGraphTopLeftCoords = Graph.screen2GraphCoords(hoverWindow.getBoundingClientRect().left, hoverWindow.getBoundingClientRect().top);
			const hwGraphBotRightCoords = Graph.screen2GraphCoords(hoverWindow.getBoundingClientRect().right, hoverWindow.getBoundingClientRect().bottom);
			//Setting for hitbox *Translated, graph coords*
			node.hwX = hwGraphTopLeftCoords.x;
			node.hwY = hwGraphTopLeftCoords.y;
			node.hwWidth = hwGraphBotRightCoords.x - hwGraphTopLeftCoords.x;
			node.hwHeight = hwGraphBotRightCoords.y - hwGraphTopLeftCoords.y;
			
			node.hovering = true;
			
	console.log("hovering");if(node.nodeID == "Nagase Yuka"){console.log(node.hovering)};
			
			node.fx = node.x; node.fy = node.y;
			
		}
		
	else{
		if (document.getElementById("hoverWindow")){
			document.getElementById("hoverWindow").remove(); 
			}
		
		if(prevNode){
			if(prevNode != node){
				if(!prevNode.pinned){
					prevNode.fx = null;
					prevNode.fy = null;
				}
				prevNode.hovering = false;
				prevNode.hwWidth = null;
				prevNode.hwHeight = null;
				prevNode.hwX = null;
				prevNode.hwY = null;
			}
		}
		
	}
}



function createHoverWindowHTML(node){
	const hwHTMLString = 
	//https://www.freecodecamp.org/news/html-button-onclick-javascript-click-event-tutorial/
	//'<img class= "hwIcon" src="' + Flourish.static_prefix + '/pin.svg" width="20" height="20"><br>' +
	'<img class= "hW" src="' + node.nodeImgSrc + '">'
	+ '<p style="text-align:center; padding: 0px">' + node.nodeID + '</p>'
	+ '<a href="' + node.entityURL + '"><p style="text-align:center"> Link </p></a>'
	;
	return hwHTMLString;
}



function pinNode(node){
	console.log(node);
	if (!node.pinned){
		node.fx = node.x; 
		node.fy = node.y;
		node.pinned = true;
	}
	else {
		node.fx = null;
		node.fy = null;
		node.pinned = false;
	}
}

function nodeDistanceFunction(link,id){
  //console.log(link);
  const dfNodeDistance = dfNodeSize; 

  if(link.rStrength){
    //***Add minimum distance to prevent overlapping(add radiuses of source and target)
    //if(link.rStrength * dfNodeDistance < link.source.size * dfNodeSize + link.target.size * dfNodeSize){
    //  return link.source.size * dfNodeSize + link.target.size * dfNodeSize; 
    //}
    return link.rStrength * dfNodeDistance;
  }
  else{
    return dfNodeDistance;
  }
    
}
